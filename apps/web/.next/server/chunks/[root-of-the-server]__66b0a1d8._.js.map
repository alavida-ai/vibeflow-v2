{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 49, "column": 0}, "map": {"version":3,"sources":["file:///Users/alexandergarciachicote/code/projects/vibeflow-v2/apps/web/src/app/api/analyze/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const WORKFLOW_CREATE_RUN_URL = process.env.WORKFLOW_CREATE_RUN_URL;\n    const WORKFLOW_STREAM_URL = process.env.WORKFLOW_STREAM_URL;\n    \n    if (!WORKFLOW_CREATE_RUN_URL || !WORKFLOW_STREAM_URL) {\n      throw new Error('WORKFLOW_CREATE_RUN_URL and WORKFLOW_STREAM_URL must be set');\n    }\n\n    const { username } = await request.json();\n    \n    if (!username) {\n      return NextResponse.json(\n        { error: 'Username is required' },\n        { status: 400 }\n      );\n    }\n\n    // Call the Mastra Twitter framework analysis workflow\n    // First create a workflow run\n    const createRunResponse = await fetch(WORKFLOW_CREATE_RUN_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!createRunResponse.ok) {\n      const errorText = await createRunResponse.text();\n      console.error('Failed to create workflow run:', errorText);\n      return NextResponse.json(\n        { error: 'Failed to create workflow run' },\n        { status: createRunResponse.status }\n      );\n    }\n\n    const { runId } = await createRunResponse.json();\n\n    const response = await fetch(`${WORKFLOW_STREAM_URL}?runId=${runId}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        inputData: {\n          username: username\n        }\n      }),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Mastra API error:', errorText);\n      \n      // Handle specific error cases\n      if (response.status === 402) {\n        return NextResponse.json(\n          { error: 'API key configuration required. Please check your OpenRouter API key.' },\n          { status: 402 }\n        );\n      }\n      \n      return NextResponse.json(\n        { error: 'Failed to analyze Twitter user' },\n        { status: response.status }\n      );\n    }\n\n    // Return the stream directly to the client\n    return new NextResponse(response.body, {\n      status: response.status,\n      headers: {\n        'Content-Type': 'text/plain',\n        'Cache-Control': 'no-cache',\n        'Connection': 'keep-alive',\n      },\n    });\n\n  } catch (error) {\n    console.error('Error analyzing Twitter user:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;;AAAA;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,0BAA0B,QAAQ,GAAG,CAAC,uBAAuB;QACnE,MAAM,sBAAsB,QAAQ,GAAG,CAAC,mBAAmB;QAE3D,IAAI,CAAC,2BAA2B,CAAC,qBAAqB;YACpD,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEvC,IAAI,CAAC,UAAU;YACb,OAAO,uTAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuB,GAChC;gBAAE,QAAQ;YAAI;QAElB;QAEA,sDAAsD;QACtD,8BAA8B;QAC9B,MAAM,oBAAoB,MAAM,MAAM,yBAAyB;YAC7D,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;QACF;QAEA,IAAI,CAAC,kBAAkB,EAAE,EAAE;YACzB,MAAM,YAAY,MAAM,kBAAkB,IAAI;YAC9C,QAAQ,KAAK,CAAC,kCAAkC;YAChD,OAAO,uTAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAgC,GACzC;gBAAE,QAAQ,kBAAkB,MAAM;YAAC;QAEvC;QAEA,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,kBAAkB,IAAI;QAE9C,MAAM,WAAW,MAAM,MAAM,GAAG,oBAAoB,OAAO,EAAE,OAAO,EAAE;YACpE,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB,WAAW;oBACT,UAAU;gBACZ;YACF;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,QAAQ,KAAK,CAAC,qBAAqB;YAEnC,8BAA8B;YAC9B,IAAI,SAAS,MAAM,KAAK,KAAK;gBAC3B,OAAO,uTAAY,CAAC,IAAI,CACtB;oBAAE,OAAO;gBAAwE,GACjF;oBAAE,QAAQ;gBAAI;YAElB;YAEA,OAAO,uTAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAiC,GAC1C;gBAAE,QAAQ,SAAS,MAAM;YAAC;QAE9B;QAEA,2CAA2C;QAC3C,OAAO,IAAI,uTAAY,CAAC,SAAS,IAAI,EAAE;YACrC,QAAQ,SAAS,MAAM;YACvB,SAAS;gBACP,gBAAgB;gBAChB,iBAAiB;gBACjB,cAAc;YAChB;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO,uTAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}