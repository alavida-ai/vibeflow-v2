{"version":3,"file":"06a7f1f4-7169-43b3-b27c-5991f2eb6107.mjs","sources":["../../.build/@brand-listener-ingestion.mjs","../../../src/mastra/tools/research/twitter-analyser.ts"],"sourcesContent":["import * as TwitterDatabaseService from '@brand-listener/core';\nimport { AnalyzerService, generateVisualDescription } from '@brand-listener/core';\nimport { z } from 'zod';\n\nfunction transformTwitterAnalyzerResponse(apiResponse) {\n  const transformedTweets = apiResponse.data.tweets.map(\n    (tweet) => transformTweetToAnalyzerDbFormat(tweet)\n  );\n  return {\n    tweets: transformedTweets,\n    hasNextPage: apiResponse.has_next_page,\n    nextCursor: apiResponse.next_cursor\n  };\n}\nvar transformTweetToAnalyzerDbFormat = (tweet) => {\n  const mediaArr = tweet.extendedEntities?.media || [];\n  const media = extractMedia(mediaArr);\n  const evs = computeEvs(tweet);\n  const type = media.length > 0 ? media[0].type : \"text\";\n  return {\n    apiId: tweet.id,\n    url: tweet.url,\n    text: tweet.text,\n    retweetCount: tweet.retweetCount,\n    replyCount: tweet.replyCount,\n    likeCount: tweet.likeCount,\n    quoteCount: tweet.quoteCount,\n    viewCount: tweet.viewCount,\n    bookmarkCount: tweet.bookmarkCount,\n    username: tweet.author.userName,\n    type,\n    media,\n    createdAt: new Date(tweet.createdAt),\n    evs\n  };\n};\nvar extractMedia = (mediaArr) => {\n  if (!Array.isArray(mediaArr)) return [];\n  return mediaArr.map((media) => {\n    if (media.type === \"video\" && media.video_info && Array.isArray(media.video_info.variants)) {\n      const mp4s = media.video_info.variants.filter((v) => v.content_type === \"video/mp4\");\n      let best = mp4s[0];\n      for (const v of mp4s) {\n        if (!best || v.bitrate && (!best.bitrate || v.bitrate > best.bitrate)) {\n          best = v;\n        }\n      }\n      return {\n        type: \"video\",\n        url: best.url\n      };\n    } else {\n      return {\n        type: media.type,\n        url: media.media_url_https\n      };\n    }\n  });\n};\nvar computeEvs = (tweet) => {\n  const weights = {\n    like: 0.1,\n    reply: 0.3,\n    retweet: 0.2,\n    quote: 0.25,\n    bookmark: 0.4\n  };\n  const scale = 1e3;\n  const numerator = weights.like * tweet.likeCount + weights.reply * tweet.replyCount + weights.retweet * tweet.retweetCount + weights.quote * tweet.quoteCount + weights.bookmark * tweet.bookmarkCount;\n  return tweet.viewCount > 0 ? Number((scale * numerator / tweet.viewCount).toFixed(4)) : 0;\n};\nfunction transformTweetToDbFormat(tweet, capturedAt = /* @__PURE__ */ new Date()) {\n  const createdAt = new Date(tweet.createdAt);\n  return {\n    tweetId: tweet.id,\n    text: tweet.text,\n    language: tweet.lang || null,\n    tweetUrl: tweet.twitterUrl,\n    // Author information\n    authorId: tweet.author.id,\n    authorUsername: tweet.author.userName || null,\n    authorName: tweet.author.name || null,\n    authorFollowers: tweet.author.followers || 0,\n    // Threading/context\n    conversationId: tweet.conversationId || null,\n    isReply: tweet.isReply,\n    inReplyToId: tweet.inReplyToId || null,\n    inReplyToUsername: tweet.inReplyToUsername || null,\n    // Engagement metrics\n    likeCount: tweet.likeCount,\n    replyCount: tweet.replyCount,\n    retweetCount: tweet.retweetCount,\n    quoteCount: tweet.quoteCount,\n    viewCount: tweet.viewCount,\n    // Timestamps\n    createdAtUtc: createdAt,\n    capturedAtUtc: capturedAt,\n    updatedAt: capturedAt,\n    // Pipeline state\n    status: \"pending\",\n    errors: [],\n    // Metadata\n    source: \"mentions\",\n    rawJson: tweet\n  };\n}\nfunction transformTwitterResponse(apiResponse) {\n  const capturedAt = /* @__PURE__ */ new Date();\n  const transformedTweets = apiResponse.tweets.map(\n    (tweet) => transformTweetToDbFormat(tweet, capturedAt)\n  );\n  return {\n    tweets: transformedTweets,\n    hasNextPage: apiResponse.has_next_page,\n    nextCursor: apiResponse.next_cursor\n  };\n}\nvar twitterAuthorSchema = z.object({\n  type: z.literal(\"user\"),\n  userName: z.string(),\n  url: z.string(),\n  twitterUrl: z.string(),\n  id: z.string(),\n  name: z.string(),\n  isVerified: z.boolean(),\n  isBlueVerified: z.boolean(),\n  verifiedType: z.string().nullable(),\n  profilePicture: z.string(),\n  coverPicture: z.string().optional(),\n  description: z.string(),\n  location: z.string(),\n  followers: z.number(),\n  following: z.number(),\n  status: z.string(),\n  canDm: z.boolean(),\n  canMediaTag: z.boolean(),\n  createdAt: z.string(),\n  entities: z.object({\n    description: z.object({\n      urls: z.array(z.unknown())\n    })\n  })\n}).passthrough();\nvar twitterTweetSchema = z.object({\n  type: z.literal(\"tweet\"),\n  id: z.string(),\n  url: z.string(),\n  twitterUrl: z.string(),\n  text: z.string(),\n  source: z.string(),\n  retweetCount: z.number(),\n  replyCount: z.number(),\n  likeCount: z.number(),\n  quoteCount: z.number(),\n  viewCount: z.number(),\n  createdAt: z.string(),\n  lang: z.string(),\n  bookmarkCount: z.number(),\n  isReply: z.boolean(),\n  inReplyToId: z.string().optional().nullable(),\n  conversationId: z.string().optional().nullable(),\n  displayTextRange: z.tuple([z.number(), z.number()]),\n  inReplyToUserId: z.string().optional().nullable(),\n  inReplyToUsername: z.string().optional().nullable(),\n  author: twitterAuthorSchema,\n  extendedEntities: z.object({\n    media: z.array(z.object({\n      type: z.string(),\n      media_url_https: z.string(),\n      video_info: z.object({\n        variants: z.array(z.object({\n          url: z.string(),\n          content_type: z.string()\n        }))\n      }).optional()\n    })).optional()\n  })\n}).passthrough();\nvar lastTweetsApiResponseSchema = z.object({\n  data: z.object({\n    tweets: z.array(twitterTweetSchema)\n  }),\n  has_next_page: z.boolean(),\n  next_cursor: z.string().optional().nullable(),\n  status: z.string(),\n  msg: z.string()\n});\nvar twitterApiResponseSchema = z.object({\n  tweets: z.array(twitterTweetSchema),\n  has_next_page: z.boolean(),\n  next_cursor: z.string().optional().nullable(),\n  status: z.string(),\n  msg: z.string()\n});\nvar TWITTER_API_BASE_URL = \"https://api.twitterapi.io\";\nvar USER_MENTIONS_ENDPOINT = \"/twitter/user/mentions\";\nvar REPLIES_ENDPOINT = \"/twitter/tweet/replies\";\nvar LAST_TWEETS_ENDPOINT = \"/twitter/user/last_tweets\";\nvar TwitterClient = class {\n  apiKey;\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n  }\n  async makeRequest(url) {\n    const response = await fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"X-API-Key\": this.apiKey,\n        \"Accept\": \"application/json\"\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      console.error(\"\\u274C API Error:\", JSON.stringify(data, null, 2));\n      throw new Error(`HTTP error! status: ${response.status}, data: ${JSON.stringify(data)}`);\n    }\n    return data;\n  }\n  async mentions({\n    userName,\n    sinceTime,\n    cursor\n  }) {\n    try {\n      const url = new URL(USER_MENTIONS_ENDPOINT, TWITTER_API_BASE_URL);\n      url.searchParams.set(\"userName\", userName);\n      url.searchParams.set(\"sinceTime\", Math.floor(sinceTime.getTime() / 1e3).toString());\n      if (cursor) {\n        url.searchParams.set(\"cursor\", cursor);\n      }\n      const rawData = await this.makeRequest(url.toString());\n      const response = twitterApiResponseSchema.parse(rawData);\n      return response;\n    } catch (error) {\n      console.error(\"\\u274C Error in mentions:\", error);\n      throw error;\n    }\n  }\n  async getReplies(tweetId, cursor) {\n    try {\n      const url = new URL(REPLIES_ENDPOINT, TWITTER_API_BASE_URL);\n      url.searchParams.set(\"tweetId\", tweetId);\n      if (cursor) {\n        url.searchParams.set(\"cursor\", cursor);\n      }\n      const rawData = await this.makeRequest(url.toString());\n      const response = twitterApiResponseSchema.parse(rawData);\n      return response;\n    } catch (error) {\n      console.error(\"\\u274C Error in replies:\", error);\n      throw error;\n    }\n  }\n  async getLastTweets(userName, cursor) {\n    try {\n      const url = new URL(LAST_TWEETS_ENDPOINT, TWITTER_API_BASE_URL);\n      url.searchParams.set(\"userName\", userName);\n      if (cursor) {\n        url.searchParams.set(\"cursor\", cursor);\n      }\n      const rawData = await this.makeRequest(url.toString());\n      const response = lastTweetsApiResponseSchema.parse(rawData);\n      return response;\n    } catch (error) {\n      console.error(\"\\u274C Error in last tweets:\", error);\n      throw error;\n    }\n  }\n};\nasync function handlePagination({\n  fetchFunction,\n  processPageFunction,\n  maxPages = 100,\n  initialCursor,\n  operationName\n}) {\n  try {\n    let cursor = initialCursor;\n    let hasNextPage = true;\n    let pageCount = 0;\n    let totalTweets = 0;\n    console.log(`\\u{1F680} Starting ${operationName}`);\n    while (hasNextPage && pageCount < maxPages) {\n      pageCount++;\n      console.log(`\\u{1F4C4} Fetching page ${pageCount}${cursor ? ` with cursor: ${cursor}` : \"\"}`);\n      const response = await fetchFunction(cursor);\n      const transformed = transformTwitterResponse(response);\n      if (transformed.tweets.length > 0) {\n        const processedCount = await processPageFunction(transformed.tweets, {\n          pageCount,\n          hasNextPage: transformed.hasNextPage\n        });\n        totalTweets += processedCount;\n      } else {\n        console.log(\"No tweets found for this page\");\n        break;\n      }\n      hasNextPage = transformed.hasNextPage;\n      cursor = transformed.nextCursor || void 0;\n      console.log(`\\u2705 Page ${pageCount}: Found ${transformed.tweets.length} tweets, hasNextPage: ${hasNextPage}`);\n    }\n    const reachedMaxPages = pageCount >= maxPages;\n    if (reachedMaxPages) {\n      console.log(`\\u26A0\\uFE0F  Reached maximum page limit (${maxPages}). There may be more tweets available.`);\n    }\n    console.log(`\\u{1F389} Complete! Processed ${totalTweets} total tweets across ${pageCount} pages`);\n    return {\n      success: true,\n      totalTweets,\n      pagesProcessed: pageCount,\n      nextCursor: cursor,\n      hasMorePages: reachedMaxPages && hasNextPage\n    };\n  } catch (error) {\n    console.error(`\\u274C ${operationName} failed:`, error);\n    return {\n      success: false,\n      totalTweets: 0,\n      pagesProcessed: 0,\n      hasMorePages: false,\n      error: error instanceof Error ? error.message : \"Unknown error\"\n    };\n  }\n}\nasync function hasUserRepliedToTweet({\n  tweetId,\n  maxPages = 100,\n  cursor: initialCursor\n}) {\n  if (!process.env.TWITTER_API_KEY) {\n    throw new Error(\"TWITTER_API_KEY is not set\");\n  }\n  const client = new TwitterClient(process.env.TWITTER_API_KEY);\n  try {\n    let currentCursor = initialCursor;\n    let hasNextPage = true;\n    let pageCount = 0;\n    console.log(`\\u{1F50D} Checking if user replied to tweet ${tweetId}`);\n    while (hasNextPage && pageCount < maxPages) {\n      pageCount++;\n      console.log(`\\u{1F4C4} Checking page ${pageCount}${currentCursor ? ` with cursor: ${currentCursor}` : \"\"}`);\n      const response = await client.getReplies(tweetId, currentCursor);\n      const transformed = transformTwitterResponse(response);\n      for (const tweet of transformed.tweets) {\n        const isUserReply = await TwitterDatabaseService.checkIfUserRepliedToTweet(tweet);\n        if (isUserReply) {\n          console.log(`\\u2705 Found user reply on page ${pageCount}`);\n          return true;\n        }\n      }\n      hasNextPage = transformed.hasNextPage;\n      currentCursor = transformed.nextCursor || void 0;\n      console.log(`\\u{1F4CA} Page ${pageCount}: Checked ${transformed.tweets.length} replies, no user reply found`);\n      if (transformed.tweets.length === 0) {\n        break;\n      }\n    }\n    console.log(`\\u{1F50D} Completed search across ${pageCount} pages - no user reply found`);\n    return false;\n  } catch (error) {\n    console.error(`\\u274C Error checking user replies for tweet ${tweetId}:`, error);\n    throw error;\n  }\n}\nasync function batchCheckIfUserRepliedToTweet(tweetIds) {\n  return Promise.all(tweetIds.map((tweetId) => checkIfUserRepliedToTweet2(tweetId)));\n}\nasync function batchFilterNonRespondedTweets(tweetIds) {\n  const results = await Promise.all(\n    tweetIds.map(async (tweetId) => ({\n      tweetId,\n      hasReply: await checkIfUserRepliedToTweet2(tweetId)\n    }))\n  );\n  return results.filter((result) => !result.hasReply).map((result) => result.tweetId);\n}\nasync function batchCheckResponseStatus(tweets) {\n  const results = await Promise.all(\n    tweets.map(async (tweetCandidate) => ({\n      tweetId: tweetCandidate.tweet.tweetId,\n      hasReply: await checkIfUserRepliedToTweet2(tweetCandidate.tweet.tweetId)\n    }))\n  );\n  const respondedTweets = results.filter((result) => result.hasReply).map((result) => result.tweetId);\n  const nonRespondedTweets = results.filter((result) => !result.hasReply).map((result) => result.tweetId);\n  const responseRate = results.length > 0 ? respondedTweets.length / results.length * 100 : 0;\n  return {\n    respondedTweets,\n    nonRespondedTweets,\n    totalChecked: results.length,\n    responseRate: Math.round(responseRate * 100) / 100\n    // Round to 2 decimal places\n  };\n}\nasync function checkIfUserRepliedToTweet2(tweetId) {\n  try {\n    const hasUserReplied = await hasUserRepliedToTweet({\n      tweetId\n    });\n    if (hasUserReplied) {\n      await TwitterDatabaseService.setTweetStatus(tweetId, TwitterDatabaseService.REPLIED_TWEET_STATUS);\n    }\n    return hasUserReplied;\n  } catch (error) {\n    console.error(`\\u274C Error checking user replies for tweet ${tweetId}:`, error);\n    throw error;\n  }\n}\nasync function ingestMentions(config) {\n  const {\n    userName,\n    sinceTime,\n    maxPages = 100,\n    cursor: initialCursor\n  } = config;\n  if (!process.env.TWITTER_API_KEY) {\n    throw new Error(\"TWITTER_API_KEY is not set\");\n  }\n  const client = new TwitterClient(process.env.TWITTER_API_KEY);\n  const fetchFunction = (cursor) => client.mentions({ userName, sinceTime, cursor });\n  const processPageFunction = async (tweets) => {\n    const result = await TwitterDatabaseService.insertTweetsAndIgnoreDuplicates(tweets);\n    console.log(`\\u{1F4BE} Uploaded ${result.length} tweets`);\n    return tweets.length;\n  };\n  return handlePagination({\n    fetchFunction,\n    processPageFunction,\n    maxPages,\n    initialCursor,\n    operationName: `mention ingestion for @${userName} since ${sinceTime.toISOString()}`\n  });\n}\nasync function ingestUserLastTweets(config) {\n  const {\n    userName,\n    maxPages = 1,\n    cursor: initialCursor\n  } = config;\n  if (!process.env.TWITTER_API_KEY) {\n    throw new Error(\"TWITTER_API_KEY is not set\");\n  }\n  const client = new TwitterClient(process.env.TWITTER_API_KEY);\n  try {\n    let cursor = initialCursor;\n    let hasNextPage = true;\n    let pageCount = 0;\n    let totalTweets = 0;\n    console.log(`\\u{1F680} Starting user last tweets ingestion for @${userName}`);\n    while (hasNextPage && pageCount < maxPages) {\n      pageCount++;\n      console.log(`\\u{1F4C4} Fetching page ${pageCount}${cursor ? ` with cursor: ${cursor}` : \"\"}`);\n      const response = await client.getLastTweets(userName, cursor);\n      const transformed = transformTwitterAnalyzerResponse(response);\n      if (transformed.tweets.length > 0) {\n        const result = await TwitterDatabaseService.AnalyzerService.saveParsedTweets(transformed.tweets);\n        console.log(`\\u{1F4BE} Uploaded ${result.length} tweets`);\n        totalTweets += transformed.tweets.length;\n      } else {\n        console.log(\"No tweets found for this page\");\n        break;\n      }\n      hasNextPage = transformed.hasNextPage;\n      cursor = transformed.nextCursor || void 0;\n      console.log(`\\u2705 Page ${pageCount}: Found ${transformed.tweets.length} tweets, hasNextPage: ${hasNextPage}`);\n    }\n    const reachedMaxPages = pageCount >= maxPages;\n    if (reachedMaxPages) {\n      console.log(`\\u26A0\\uFE0F  Reached maximum page limit (${maxPages}). There may be more tweets available.`);\n    }\n    console.log(`\\u{1F389} Complete! Processed ${totalTweets} total tweets across ${pageCount} pages`);\n    return {\n      success: true,\n      totalTweets,\n      pagesProcessed: pageCount,\n      nextCursor: cursor,\n      hasMorePages: reachedMaxPages && hasNextPage\n    };\n  } catch (error) {\n    console.error(`\\u274C User last tweets ingestion failed:`, error);\n    return {\n      success: false,\n      totalTweets: 0,\n      pagesProcessed: 0,\n      hasMorePages: false,\n      error: error instanceof Error ? error.message : \"Unknown error\"\n    };\n  }\n}\nvar TwitterAnalyser = class {\n  userName;\n  maxPages;\n  apiKey;\n  databaseUrl;\n  constructor(config) {\n    this.userName = config.userName;\n    this.maxPages = config.maxPages || 1;\n    this.apiKey = config.apiKey || process.env.TWITTER_API_KEY || \"\";\n    this.databaseUrl = config.databaseUrl || process.env.DATABASE_URL || \"\";\n    this.validateConfiguration();\n  }\n  /**\n   * Validate that all required configuration is present\n   */\n  validateConfiguration() {\n    if (!this.userName) {\n      throw new Error(\"userName is required\");\n    }\n    if (!this.maxPages) {\n      throw new Error(\"maxPages is required\");\n    }\n    if (!this.apiKey) {\n      throw new Error(\"TWITTER_API_KEY is not set\");\n    }\n    if (!this.databaseUrl) {\n      throw new Error(\"DATABASE_URL is not set\");\n    }\n  }\n  /**\n   * Run the complete Twitter analysis process\n   */\n  async run() {\n    try {\n      console.log(`\\u{1F680} Starting Twitter analysis for @${this.userName}`);\n      const ingestionResult = await this.ingestUserLastTweets();\n      if (!ingestionResult.success) {\n        return {\n          success: false,\n          ingestionResult,\n          mediaProcessed: 0,\n          error: ingestionResult.error || \"Ingestion failed\"\n        };\n      }\n      console.log(`\\u2705 Ingestion complete: ${ingestionResult.totalTweets} tweets processed`);\n      const mediaProcessed = await this.generateMediaDescriptions();\n      console.log(`\\u2705 Analysis complete: ${mediaProcessed} media items processed`);\n      return {\n        success: true,\n        ingestionResult,\n        mediaProcessed\n      };\n    } catch (error) {\n      console.error(\"\\u274C Twitter analysis failed:\", error);\n      return {\n        success: false,\n        ingestionResult: {\n          success: false,\n          totalTweets: 0,\n          pagesProcessed: 0,\n          hasMorePages: false,\n          error: error instanceof Error ? error.message : \"Unknown error\"\n        },\n        mediaProcessed: 0,\n        error: error instanceof Error ? error.message : \"Unknown error\"\n      };\n    }\n  }\n  /**\n   * Ingest the user's last tweets\n   */\n  async ingestUserLastTweets() {\n    console.log(`\\u{1F4E5} Starting tweet ingestion for @${this.userName}`);\n    const result = await ingestUserLastTweets({\n      userName: this.userName,\n      maxPages: this.maxPages\n    });\n    return result;\n  }\n  /**\n   * Generate AI descriptions for media content in tweets\n   */\n  async generateMediaDescriptions() {\n    console.log(`\\u{1F3A8} Starting media description generation for @${this.userName}`);\n    const mediaItems = await AnalyzerService.getMediaByAuthorUsername(this.userName);\n    if (mediaItems.length === 0) {\n      console.log(\"No media items found that need description generation\");\n      return 0;\n    }\n    console.log(`Found ${mediaItems.length} media items to process`);\n    const results = await Promise.allSettled(\n      mediaItems.map(async (media) => {\n        try {\n          const description = await generateVisualDescription(media.type, media.url);\n          media.description = description;\n          media.updatedAt = /* @__PURE__ */ new Date();\n          await AnalyzerService.updateMediaDescriptions(media);\n          return true;\n        } catch (error) {\n          console.error(`\\u274C Failed to process media ${media.id}:`, error);\n          return false;\n        }\n      })\n    );\n    const successfulProcessing = results.filter(\n      (result) => result.status === \"fulfilled\" && result.value === true\n    ).length;\n    console.log(`\\u2705 Successfully processed ${successfulProcessing} of ${mediaItems.length} media items`);\n    return successfulProcessing;\n  }\n  /**\n   * Get analysis statistics for the user\n   */\n  async getAnalysisStats() {\n    const mediaItems = await AnalyzerService.getMediaByAuthorUsername(this.userName);\n    const processedMedia = mediaItems.filter((media) => media.description).length;\n    return {\n      totalTweets: 0,\n      // Would need AnalyzerService.getTweetCountByUsername(this.userName)\n      mediaItems: mediaItems.length,\n      processedMedia\n    };\n  }\n};\nasync function createAndRunTwitterAnalyser(userName, maxPages) {\n  const targetUserName = userName || process.env.TWITTER_USERNAME;\n  if (!targetUserName) {\n    throw new Error(\"userName must be provided or TWITTER_USERNAME environment variable must be set\");\n  }\n  const analyser = new TwitterAnalyser({\n    userName: targetUserName,\n    maxPages\n  });\n  return await analyser.run();\n}\nasync function main() {\n  const result = await createAndRunTwitterAnalyser(\n    \"Send\"\n  );\n  if (result.success) {\n    console.log(\"\\u2705 Twitter analysis completed successfully\");\n    console.log(`\\u{1F4CA} Summary: ${result.ingestionResult.totalTweets} tweets, ${result.mediaProcessed} media processed`);\n  } else {\n    console.error(\"\\u274C Twitter analysis failed:\", result.error);\n    throw new Error(result.error);\n  }\n}\nif (import.meta.url === `file://${process.argv[1]}`) {\n  const { config } = await import('dotenv');\n  config({ path: \"/Users/alexandergirardet/Code/vibeflow/vibeflow-projects/vibeflow-v2/.env\" });\n  main().then(() => {\n    console.log(\"\\u2705 Main process finished\");\n    process.exit(0);\n  }).catch((error) => {\n    console.error(\"\\u274C Main process failed:\", error);\n    process.exit(1);\n  });\n}\n\nexport { LAST_TWEETS_ENDPOINT, REPLIES_ENDPOINT, TWITTER_API_BASE_URL, TwitterAnalyser, TwitterClient, USER_MENTIONS_ENDPOINT, batchCheckIfUserRepliedToTweet, batchCheckResponseStatus, batchFilterNonRespondedTweets, checkIfUserRepliedToTweet2 as checkIfUserRepliedToTweet, computeEvs, createAndRunTwitterAnalyser, hasUserRepliedToTweet, ingestMentions, ingestUserLastTweets, lastTweetsApiResponseSchema, main, transformTweetToDbFormat, transformTwitterAnalyzerResponse, transformTwitterResponse, twitterApiResponseSchema, twitterAuthorSchema, twitterTweetSchema };\n","import { createTool } from '@mastra/core/tools';\nimport { TwitterAnalyser } from '@brand-listener/ingestion';\nimport { z } from 'zod';\n\n\nexport const twitterSearcherTool = createTool({\n  id: 'twitter-scraper',\n  description: 'Search for tweets from a user and get info on any media in the tweets',\n  inputSchema: z.object({\n    userName: z.string().describe('Twitter username to analyze'),\n    numTweets: z.number().describe('Number of tweets to analyze'),\n  }),\n  outputSchema: z.object({\n    summary: z.object({\n      username: z.string()\n    })\n  }),\n  execute: async ({ context }) => {\n    try { \n    const twitterAnalyser = new TwitterAnalyser({\n      userName: context.userName,\n      maxPages: context.numTweets / 20\n    });\n    const tweetsForOutput = await twitterAnalyser.run();\n    \n    return {\n      summary: {\n        totalTweets: tweetsForOutput.ingestionResult.totalTweets,\n        username: context.userName\n      }\n    };\n  } catch (error) {\n    throw new Error(`Failed to scrape tweets: ${error instanceof Error ? error.message : String(error)}`);\n  }\n  },\n});"],"names":[],"mappings":"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"}