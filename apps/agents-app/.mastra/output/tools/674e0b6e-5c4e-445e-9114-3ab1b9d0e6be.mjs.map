{"version":3,"file":"674e0b6e-5c4e-445e-9114-3ab1b9d0e6be.mjs","sources":["../../../src/mastra/tools/research/perplexity.ts"],"sourcesContent":["#!/usr/bin/env node\nimport { z } from \"zod\";\nimport { createTool } from \"@mastra/core\";\nimport { PERPLEXITY_SONAR } from \"../../constants\";\n\nconst perplexityAskSchema = z.object({\n  messages: z.array(z.object({\n    role: z.string().describe(\"Role of the message (e.g., system, user, assistant)\"),\n    content: z.string().describe(\"The content of the message\"),\n  })),\n});\n\nexport const perplexityAskTool = createTool({\n  id: \"perplexityAsk\",\n  description: `Ask a question to the Perplexity Sonar model via OpenRouter API. Use this tool to perform research on a given topic.\n  Example usage:\n  \\`\\`\\`json\n  {\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"What is the capital of France?\"\n      }\n    ]\n  }\n  \\`\\`\\``,\n  inputSchema: perplexityAskSchema,\n  execute: async ({ context, runtimeContext }) => {\n    const messages = context.messages;\n    const result = await performChatCompletion(messages);\n    return result;\n  },\n});\n\nasync function performChatCompletion(\n  messages: Array<{ role: string; content: string }>,\n  model: string = PERPLEXITY_SONAR\n): Promise<string> {\n  const url = \"https://openrouter.ai/api/v1/chat/completions\";\n  const body = {\n    model: model,\n    messages: messages,\n    // Additional parameters can be added here if required (e.g., max_tokens, temperature, etc.)\n    // See the OpenRouter API documentation for more details\n  };\n\n  let response;\n  try {\n    response = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": `Bearer ${process.env.OPENROUTER_API_KEY!}`,\n        \"HTTP-Referer\": process.env.SITE_URL || \"\", // Optional. Site URL for rankings on openrouter.ai.\n        \"X-Title\": process.env.SITE_NAME || \"\", // Optional. Site title for rankings on openrouter.ai.\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body),\n    });\n  } catch (error) {\n    throw new Error(`Network error while calling OpenRouter API: ${error}`);\n  }\n\n  // Check for non-successful HTTP status\n  if (!response.ok) {\n    let errorText;\n    try {\n      errorText = await response.text();\n    } catch (parseError) {\n      errorText = \"Unable to parse error response\";\n    }\n    throw new Error(\n      `OpenRouter API error: ${response.status} ${response.statusText}\\n${errorText}`\n    );\n  }\n\n  // Attempt to parse the JSON response from the API\n  let data;\n  try {\n    data = await response.json();\n  } catch (jsonError) {\n    throw new Error(`Failed to parse JSON response from OpenRouter API: ${jsonError}`);\n  }\n\n  // Directly retrieve the main message content from the response \n  const messageContent = data.choices[0].message.content;\n\n  return messageContent;\n}"],"names":[],"mappings":";;;;;AAKA,MAAM,mBAAA,GAAsB,EAAE,MAAA,CAAO;AAAA,EACnC,QAAA,EAAU,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,MAAA,CAAO;AAAA,IACzB,IAAA,EAAM,CAAA,CAAE,MAAA,EAAO,CAAE,SAAS,qDAAqD,CAAA;AAAA,IAC/E,OAAA,EAAS,CAAA,CAAE,MAAA,EAAO,CAAE,SAAS,4BAA4B;AAAA,GAC1D,CAAC;AACJ,CAAC,CAAA;AAEM,MAAM,oBAAoB,UAAA,CAAW;AAAA,EAC1C,EAAA,EAAI,eAAA;AAAA,EACJ,WAAA,EAAa,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAA,CAAA;AAAA,EAYb,WAAA,EAAa,mBAAA;AAAA,EACb,OAAA,EAAS,OAAO,EAAE,OAAA,EAAS,gBAAe,KAAM;AAC9C,IAAA,MAAM,WAAW,OAAA,CAAQ,QAAA;AACzB,IAAA,MAAM,MAAA,GAAS,MAAM,qBAAA,CAAsB,QAAQ,CAAA;AACnD,IAAA,OAAO,MAAA;AAAA,EACT;AACF,CAAC;AAED,eAAe,qBAAA,CACb,QAAA,EACA,KAAA,GAAgB,gBAAA,EACC;AACjB,EAAA,MAAM,GAAA,GAAM,+CAAA;AACZ,EAAA,MAAM,IAAA,GAAO;AAAA,IACX,KAAA;AAAA,IACA;AAAA;AAAA;AAAA,GAGF;AAEA,EAAA,IAAI,QAAA;AACJ,EAAA,IAAI;AACF,IAAA,QAAA,GAAW,MAAM,MAAM,GAAA,EAAK;AAAA,MAC1B,MAAA,EAAQ,MAAA;AAAA,MACR,OAAA,EAAS;AAAA,QACP,eAAA,EAAiB,CAAA,OAAA,EAAU,OAAA,CAAQ,GAAA,CAAI,kBAAmB,CAAA,CAAA;AAAA,QAC1D,cAAA,EAAgB,OAAA,CAAQ,GAAA,CAAI,QAAA,IAAY,EAAA;AAAA;AAAA,QACxC,SAAA,EAAW,OAAA,CAAQ,GAAA,CAAI,SAAA,IAAa,EAAA;AAAA;AAAA,QACpC,cAAA,EAAgB;AAAA,OAClB;AAAA,MACA,IAAA,EAAM,IAAA,CAAK,SAAA,CAAU,IAAI;AAAA,KAC1B,CAAA;AAAA,EACH,SAAS,KAAA,EAAO;AACd,IAAA,MAAM,IAAI,KAAA,CAAM,CAAA,4CAAA,EAA+C,KAAK,CAAA,CAAE,CAAA;AAAA,EACxE;AAGA,EAAA,IAAI,CAAC,SAAS,EAAA,EAAI;AAChB,IAAA,IAAI,SAAA;AACJ,IAAA,IAAI;AACF,MAAA,SAAA,GAAY,MAAM,SAAS,IAAA,EAAK;AAAA,IAClC,SAAS,UAAA,EAAY;AACnB,MAAA,SAAA,GAAY,gCAAA;AAAA,IACd;AACA,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,CAAA,sBAAA,EAAyB,QAAA,CAAS,MAAM,CAAA,CAAA,EAAI,SAAS,UAAU;AAAA,EAAK,SAAS,CAAA;AAAA,KAC/E;AAAA,EACF;AAGA,EAAA,IAAI,IAAA;AACJ,EAAA,IAAI;AACF,IAAA,IAAA,GAAO,MAAM,SAAS,IAAA,EAAK;AAAA,EAC7B,SAAS,SAAA,EAAW;AAClB,IAAA,MAAM,IAAI,KAAA,CAAM,CAAA,mDAAA,EAAsD,SAAS,CAAA,CAAE,CAAA;AAAA,EACnF;AAGA,EAAA,MAAM,cAAA,GAAiB,IAAA,CAAK,OAAA,CAAQ,CAAC,EAAE,OAAA,CAAQ,OAAA;AAE/C,EAAA,OAAO,cAAA;AACT;;;;"}